<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <title>Chat | Mon IRC</title>
    <link rel="stylesheet" href="/css/style.css" />
  </head>


    

  <body>
    <header>
      <p>My IRC Chat</p>
      <div>
        <p><%= username %></p> 
        <a href="/user/logout">Déconnexion</a>
      </div>
    </header>


    <div class="container">
      <div id="bar">
        <a id="showCreateChannel" href="/chat/channels">Créer un canal</a>
        <div id="channels-list">
          <% channels.forEach(function(channel) { %>
            <% 
              // Pour les canaux privés, vérifiez si l'utilisateur courant est un membre du canal
              var isMember = channel.members && channel.members.some(member => member.toString() === userId.toString());
            %>
            <% if (channel.type === 'private_message' && isMember) { %>
              <% 
                // Trouver l'ID du destinataire (autre que l'utilisateur courant)
                var recipientId = channel.members.find(member => member.toString() !== userId.toString());
                var recipient = users.find(user => user._id.toString() === recipientId.toString());
                // Déterminer le nom du destinataire
                var recipientName = recipient ? recipient.username : 'Inconnu';
              %>
              <div class="channel-option" data-channel-id="<%= channel._id %>">
                <p><%= recipientName %></p>
                <hr>
              </div>
            <% } else if (channel.type !== 'private_message') { %>
              <div class="channel-option" data-channel-id="<%= channel._id %>">
                <p><%= channel.name %></p>
                <hr>
              </div>
            <% } %>
          <% }); %>
        </div>
      </div>
      
  
      <form id="chat-container">
      
        <h1>Chat IRC</h1>
        <div id="messages"></div>
        <input
          type="text"
          id="message-input"
          placeholder="Écrivez votre message ici..."
        />
        <button id="send-button">Envoyer</button>
      </form>
      <div id="bar">
        <a id="showCreateChannel">Liste des utilisateurs</a>
        <div id="user-list">
          <% users.forEach(function(user) { %>
            <% if (user._id.toString() !== userId.toString()) { %>
              <div class="user-option" data-user-id="<%= user._id %>" onclick="createOrSelectPrivateChannel('<%= user._id %>', '<%= user.username %>')">
                <p><%= user.username %></p>
                <hr>
              </div>
            <% } %>
          <% }); %>
        </div>      
      </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      var socket = io('http://localhost:3000');
      var channel;
      var userId = "<%= userId %>";


      // Select the channel that has the main or primary text.
      document.addEventListener('DOMContentLoaded', (event) => {
        const paragraphs = document.querySelectorAll('p');
        paragraphs.forEach((p) => {
            if(p.textContent.trim() === "principal" || p.textContent.trim() === "principale") {
                p.click(); 
                return; 
            }
        });
    });

      //create private channel
      function createOrSelectPrivateChannel(otherUserId, otherName) {

        const uniqueId = Date.now();
        const uniqueName = `${otherName}-${uniqueId}`;
        fetch('/channels', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
                name: uniqueName,
                description: `${otherName}`,
                type: "private_message",
                members: [otherUserId] // Assurez-vous que ceci est un tableau
              })

        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          console.log(data); 
        })
        .catch(error => {
          console.error('Could not create or select private channel:', error);
        });
      }

      // When a channel is selected, load its messages
      document.querySelectorAll('.channel-option').forEach(option => {
        option.addEventListener('click', function() {

          document.querySelectorAll('.channel-option').forEach(otherOption => {
            otherOption.classList.remove('channel-selected');
          });

          // Ajouter la classe 'channel-selected' au canal cliqué
          option.classList.add('channel-selected');
          const channelId = option.dataset.channelId;
          const channelType = option.dataset.channelType;
    
          let members; // Declare the members variable
    
          fetch(`/channels/${channelId}`)
            .then(response => response.json())
            .then(data => {
              members = data.members; // Assign the retrieved members to the members variable
              
              // Create the channel object within the promise
              channel = {
                channelId: channelId,
                channelType: data.type,
                members: members
              };
    
              // Use the channel object in your logic
              loadChannelMessages(channelId);
            })
            .catch(error => console.error('Error fetching members:', error));
        });
      });
    
      var form = document.getElementById('chat-container');
      var messageInput = document.getElementById('message-input');
      var messagesContainer = document.getElementById('messages');
    
      // When sending a message, add it to the #messages section and emit it via Socket.IO
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        if (messageInput.value) {
          const date = Date.now();
          const channelId = channel.channelId;
          const members = channel.members;
          const type = channel.channelType;
          
          // Add the channel information to the message
          const messageData = {
            content: messageInput.value,
            user: userId,
            channel: channelId,
            receiverId: members,
            messageType: type,
            createdAt: date,
          };
    
          const messageId = Date.now();
    
          addItemToChat(messageInput.value, 'sent', messageId);
    
          // Emit the event to send the message via Socket.IO
          socket.emit(channel.channelType, messageData);
    
          messageInput.value = '';
        }
      });
    
      // Modification of the addItemToChat function to include the user ID
      function addItemToChat(message, className, messageId, senderId) {
          // Ignore adding the message if it comes from the current user but is received as a message from another
          if (className === 'received' && senderId === userId) {
              return;
          }
          var item = document.createElement('p');
          item.textContent = message;
          item.classList.add(className);
          item.setAttribute('data-id', messageId);
          messagesContainer.appendChild(item);
          window.scrollTo(0, document.body.scrollHeight);
      }
    
      // Modify the Socket.IO listeners to use the modified function and check the user ID
      socket.on('public_message', function(data) {
      if (channel && channel.channelId === data.channel && (channel.channelType === 'public_message' || channel.channelType === 'group_message')) {
              addItemToChat(data.content, 'received', data.messageId, data.user, data.createdAt);
          }
      });

      socket.on('private_message', function(data) {
          if (channel && channel.channelId === data.channel && channel.channelType === 'private_message' && channel.members.includes(userId)) {
              addItemToChat(data.content, 'received', data.messageId, data.user, data.createdAt);
          }
      });

      socket.on('group_message', function(data) {
          if (channel && channel.channelId === data.channel && channel.channelType === 'group_message' && channel.members.includes(data.user)) {
              addItemToChat(data.content, 'received', data.messageId, data.user, data.createdAt);
          }
      });


    
      async function loadChannelMessages(channelId) {
          try {
              const response = await fetch(`/chat/messages/${channelId}`); // Make sure you have an appropriate route to retrieve the messages from a specific channel
              const messages = await response.json();
    
              // Update the display of messages in #messages
              const messagesContainer = document.getElementById('messages');
              messagesContainer.innerHTML = ''; // Clear previous messages
              
              messages.forEach(message => {
                  const item = document.createElement('p');
                  item.textContent = message.content;
                  
                  // Add the 'received' or 'sent' class depending on the user ID or members (recipients)
                  if (message.user === userId) {
                      addItemToChat(message.content, 'sent', userId);
                  } else {
                      addItemToChat(message.content, 'received', userId);
                  }
    
              });
          } catch (error) {
              console.error('Error loading channel messages:', error);
          }
      }
    </script>
    
  
  </body>
</html>
